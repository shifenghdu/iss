#! /bin/bash
# author andy
VMOPTION="-server -Xms2048m -Xmx2048m -Xss256k -XX:+AggressiveOpts -XX:+UseParallelGC -XX:+UseBiasedLocking -XX:NewSize=64m -XX:PermSize=256M"

function checkpid(){
	if [ ! -n "$1" ] ; then
		return 0
	fi
	if [ $1 -eq 0 ] ; then 
		return 0 
	fi
	PNUM=`ps -p $1 | grep : | grep -v grep | wc -l`
	if [ $PNUM -eq 1 ] ; then
		return 1
	else
		return 0
	fi
}

function clearpid(){
	echo 0 > $ISS_HOME/bin/pid/$1.pid
}

function getpidmem()
{
	if [ $1 -eq 0 ] ; then
		return 0
	fi
	MEM=`pmap $1 | grep total | awk '{printf $2}'`
	#MEM="0K"
	echo $MEM
}

function checkPidFile()
{
	if [ ! -d $ISS_HOME/bin/pid ]; then
		mkdir -p $ISS_HOME/bin/pid
	fi
	if [ ! -f $ISS_HOME/bin/pid/$1.pid ] ; then
		touch $ISS_HOME/bin/pid/$1.pid
	fi
}

function checkVmOption()
{
	if [ ! -d $ISS_HOME/bin/pid ]; then
		mkdir -p $ISS_HOME/bin/pid
	fi
	if [ ! -f $ISS_HOME/bin/pid/$1.vm.config ] ; then
		touch $ISS_HOME/bin/pid/$1.vm.config
	fi
}

function setVmOption()
{
	if [ ! -n "$2"  ] ; then
		echo $VMOPTION > $ISS_HOME/bin/pid/$1.vm.config
	else
		echo $2 > $ISS_HOME/bin/pid/$1.vm.config
	fi
}

function getVmOption()
{
	OPTION=`cat $ISS_HOME/bin/pid/$1.vm.config`
	if [ ! -n "$OPTION" ] ; then
		echo $VMOPTION > $ISS_HOME/bin/pid/$1.vm.config
		OPTION=$VMOPTION
	fi
	echo $OPTION
}

function start(){
    checkPidFile $1
	checkVmOption $1
	OPTION=`getVmOption $1`
	PID=`cat $ISS_HOME/bin/pid/$1.pid`
	checkpid $PID
	if [ $? -eq 1 ] ; then
		echo -e "$1 \e[32m online \e[0m pid [$PID]"
	else
        	PWD=`pwd`
        	JAR=`ls $ISS_HOME/lib | grep iss.core`
        	$JRE_HOME/bin/java -Diss.config=$1.xml -Diss.path=$ISS_HOME $OPTION -jar $ISS_HOME/lib/$JAR &
		echo $! > $ISS_HOME/bin/pid/$1.pid

	fi
}

function stop(){
    checkPidFile $1
	checkVmOption $1
	PID=`cat $ISS_HOME/bin/pid/$1.pid`
	checkpid $PID
        if [ $? -eq 1 ] ; then
		kill -9 $PID
        	echo -e "$1 \e[31m offline \e[0m pid [$PID]"
        	clearpid $1 
        else
		echo $1 not running
        fi
}

function useage(){
	echo "useage: iss [start|stop] [nodename]	-- start/stop node" 
	echo "             list         	  	-- list all node status"
	echo "             setvm nodename vmoption      -- set vmoption"
}

function list(){
	printf "=========================================================================================================\n"
	printf "|	node		| 	status		|       pid	|	mem		|	jmx	|\n" 
	printf "=========================================================================================================\n"
	for file in $ISS_HOME/bin/pid/*.pid
	do
		if [ -f $file ] ; then
			PID=`cat $file`
			NODE=${file##*/}
			NODE=${NODE%.*}
			MEM=`getpidmem $PID`
			JMXPORT=`cat $ISS_HOME/bin/pid/$NODE.vm.config | grep -o 'com.sun.management.jmxremote.port=[0-9]*' | awk -F '=' '{print $2}'`
			checkpid $PID
			if [ $? -eq 1 ] ; then
				printf "|%20s\t| 	\e[32m online \e[0m	|	%d	|\t%s\t|\t%s\t|\n" $NODE $PID $MEM $JMXPORT
			else
				clearpid $NODE
				printf "|%20s\t|	\e[31m offline \e[0m	|	0	|	0K		|\t0\t|\n" $NODE 
			fi
		fi
	done
	printf "=========================================================================================================\n"
}

function setvm(){
	checkVmOption $1
	setVmOption $1 "$2"
}

if [ $# -ge 1 ] ; then
	if [ $1 == "start" ] ; then
		start $2
	elif [ $1 == "stop" ] ; then
		stop $2
	elif [ $1 == "list" ] ; then
		list
	elif [ $1 == "setvm" ] ; then
		echo $3
		setvm $2 "$3"
	else
		useage	
	fi
else
	useage
fi
